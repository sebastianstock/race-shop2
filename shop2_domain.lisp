(in-package :race_shop2_planner)

(defdomain race-domain
    (

     (:- (new_constant ?name ?prefix ?cnt ?postfix)
         ((assign ?name (intern (format nil "~A~A~A" '?prefix '?cnt '?postfix)))))

     (:- (new_constant ?name ?prefix ?cnt)
         ((assign ?name (intern (format nil "~A~A" '?prefix '?cnt)))))

     (:- (inc_cnt ?name ?old)
         (assign ?name (1+ '?old)))

     (:operator (!imagine ?task ?arg1 ?arg2)
                (
                 (CNT ?cnt)
                 (inc_cnt ?cntn ?cnt))
                ((CNT ?cnt))
                ((CNT ?cntn))
     )
     
     (:operator (!pick_from_tray ?object ?arm ?trayArea)
                (
                 (Instance TrayArea ?trayArea)
                 (Instance On ?on)
                 (HasArea ?on ?trayArea)
                 (HasPhysicalEntity ?on ?object)
                 (Instance Arm ?arm)
                 (HasGripper ?arm ?gripper)
                 (not ((Instance Holding ?holding)
                       (HasGripper ?holding ?gripper)
                       (HasPassiveObject ?holding ?otherObject)
                      ))
                 (HasArmPosture ?arm ?armposture)
                 (Instance ArmToSidePosture ?armposture)
                 (Instance TorsoUpPosture ?torsoposture)
                                        ; affordanceExceptions
                 (Instance ?objtype ?object)
                 (not (hasAffordanceException ?objtype pick_from_tray))
                                        ; assignments
                 (CNT ?cnt)
                 (new_constant ?newHolding Holding ?cnt)
                 (new_constant ?newArmPosture ArmToSidePosture ?cnt ?arm)
                 (inc_cnt ?cntn ?cnt)
                 )
                ; del
                ((Instance On ?on)
                 (HasArea ?on ?trayArea)
                 (HasPhysicalEntity ?on ?object)
                 (Instance ArmToSidePosture ?armposture)
                 (hasArmPosture ?arm ?armposture)
                 (CNT ?cnt))
                ; add
                ((Instance Holding ?newHolding)
                 (HasGripper ?newHolding ?gripper)
                 (hasPassiveObject ?newHolding ?object)
                 (Instance ArmToSidePosture ?newArmPosture)
                 (hasArmPosture ?arm ?newArmPosture)
                 (CNT ?cntn)))
     
     (:operator (!place_on_tray ?object ?arm ?trayArea)
                (
                 (Instance TrayArea ?trayArea)
                 (not ((Instance On ?trayOn)
                       (HasArea ?trayOn ?trayArea)
                       (HasPhysicalEntity ?trayOn ?otherObject)))
                 (HasGripper ?arm ?gripper)
                 (Instance Holding ?holding)
                 (HasGripper ?holding ?gripper)
                 (HasPassiveObject ?holding ?object)
                 (Instance Arm ?arm)
                 (HasArmPosture ?arm ?armposture)
                 (Instance ArmToSidePosture ?armposture)
                 (Instance TorsoUpPosture ?torsoposture)
                  ; affordanceExceptions
                 (Instance ?objtype ?object)
                 (not (hasAffordanceException ?objtype place_on_tray))
                                        ; assignments
                 (CNT ?cnt)
                 (new_constant ?newOn On ?cnt)
                 (new_constant ?newArmPosture ArmToSidePosture ?cnt ?arm)
                 (inc_cnt ?cntn ?cnt)
                 )
                ; del
                ((Instance Holding ?holding)
                 (HasGripper ?holding ?gripper)
                 (HasPassiveObject ?holding ?object)
                 (Instance ArmToSidePosture ?armposture)
                 (hasArmPosture ?arm ?armposture)
                 (CNT ?cnt))
                ; add
                ((Instance On ?newOn)
                 (HasArea ?newOn ?trayArea)
                 (HasPhysicalEntity ?newOn ?object)
                 (Instance ArmToSidePosture ?newArmPosture)
                 (hasArmPosture ?arm ?newArmPosture)
                 (CNT ?cntn))
                )

     (:operator (!replan ?task ?arg1 ?arg2)
                                        ;pre
                ((Instance ?type ?arg1)
                 (CNT ?cnt)
                 (inc_cnt ?cntn ?cnt))
                ((CNT ?cnt))
                ((CNT ?cntn))
     )

     (:operator (!wait_until_unblocked ?area)
                ; pre
                ((Instance At ?at)
                 (hasArea ?at ?area)
                 (hasPhysicalEntity ?at ?obstacle))
                ; del
                ((Instance At ?at)
                 (hasArea ?at ?area)
                 (hasPhysicalEntity ?at ?obstacle))
                ())

     (:operator (!observe_objects_on_area ?plArea)
                ((Instance RobotAt ?robotat)
                 (HasRobot ?robotat trixi1)
                 (HasArea ?robotat ?manArea)
                 (Instance ManipulationArea ?manArea)
                 (Instance PlacingArea ?plArea)
                 (HasManipulationArea ?plArea ?manArea)
                 (CNT ?cnt)
                 (inc_cnt ?cntn ?cnt))
                ((CNT ?cnt))
                ((CNT ?cntn) 
                 )
                )

     (:operator (!point_head ?point)
                ((Instance Point ?point)
                 (CNT ?cnt)
                 (inc_cnt ?cntn ?cnt))
                ((CNT ?cnt))
                ((CNT ?cntn) 
                 )
                )     
     
     (:operator (!point_to_object ?arm ?object)
                ((Instance Arm ?arm)
                 (hasArmPosture ?arm ?old_posture)
                 (Instance ?old_posture_type ?old_posture)
                 (CNT ?cnt)
                 (new_constant ?new_posture ArmPointingPosture ?cnt)
                 (inc_cnt ?cntn ?cnt)
                 )
                ((Instance ?old_posture_type ?old_posture)
                 (hasArmPosture ?arm ?old_posture)
                 (CNT ?cnt))
                ((Instance ArmPointingPosture ?new_posture)
                 (hasArmPosture ?arm ?new_posture)
                 (CNT ?cntn)))

     (:method (lift_mugs_on_area ?lifted_name ?area)
       (
        (Instance Mug ?mug)
        (not (Lifted ?mug))
        (Instance On ?on)
        (HasArea ?on ?area)
        (HasPhysicalEntity ?on ?mug)
        )
       ((create_lifted_mug ?lifted_name ?area)
        (!lift_mug ?mug ?lifted_name)
        (lift_mugs_on_area ?lifted_name ?area))
       ()
       ()
       )

     (:method (create_lifted_mug ?lifted_name ?area)
       ((not (Instance Mug ?lifted_name)))
       ((!create_lifted_mug ?lifted_name ?area))
       ()
       ())

     (:operator (!create_lifted_mug ?lifted_name ?area)
                ((not (Instance Mug ?lifted_name)) 
                 (CNT ?cnt)
                 (new_constant ?new_on On ?cnt)
                 (inc_cnt ?cntn ?cnt))  
                ((CNT ?cnt))
                ((Instance Mug ?lifted_name)
                 (Lifted ?lifted_name)
                 (Instance On ?new_on)
                 (hasPhysicalEntity ?new_on ?lifted_name)
                 (hasArea ?new_on ?area)
                 (CNTN ?cntn)))

     (:operator (!lift_mug ?mug ?lifted_name)
                ((Instance Mug ?mug))
                ((Instance Mug ?mug))
                ((IsLiftedAs ?mug ?lifted_name)))

        (:method (get_lifted_mug_from ?counter)
        (
            (Instance Counter ?counter)
            (HasPlacingArea ?counter ?counterArea)
            )
        ((lift_mugs_on_area "liftedMug1" ?counterArea) 
         (get_object_w_arm "liftedMug1" rightArm1)
        )
        )

     (:operator (!tuck_arms ?left_arm_goal ?right_arm_goal)
                                        ;pre
                 ((eval (Member '?left_arm_goal
                         '(ArmTuckedPosture ArmUnTuckedPosture)))
                  (eval (Member '?right_arm_goal
                         '(ArmTuckedPosture ArmUnTuckedPosture)))
                                        ; Armposture of left arm
                 (Instance Arm leftArm1)
                 (hasArmPosture leftArm1 ?lPosture)
                 (Instance ?lPostureType ?lPosture)
                                        ; old Armposture of right arm
                 (Instance Arm rightArm1)
                 (hasArmPosture rightArm1 ?rPosture)
                 (Instance ?rPostureType ?rPosture)
                                        ; assignments
                 (CNT ?cnt)
                 (new_constant ?nlPosture ?left_arm_goal ?cnt "l")
                 (new_constant ?nrPosture ?right_arm_goal ?cnt "r")
                 (inc_cnt ?cntn ?cnt)
                 )
                                        ; del
                (
                 ;(hasArmPosture leftArm1 ?lPosture)
                 ;(Instance ?lPostureType ?lPosture)
                 ;(hasArmPosture rightArm1 ?rPosture)
                 ;(Instance ?rPostureType ?rPosture)
                 (forall (?lP ?lPostureType)
                         ((hasArmPosture leftArm1 ?lP)
                          (Instance ?lPostureType ?lP)
                          (not (Instance ?left_arm_goal ?lP))
                          )
                          ((hasArmPosture leftArm1 ?lP)
                           (Instance ?lPostureType ?lP))
                         )
                 (forall (?rP ?rPostureType)
                         ((hasArmPosture rightArm1 ?rP)
                          (Instance ?rPostureType ?rP)
                          (not (Instance ?right_arm_goal ?rP))
                          )
                          ((hasArmPosture rightArm1 ?rP)
                           (Instance ?rPostureType ?rP))
                         )
                 (CNT ?cnt)

                 )
                                        ; add
                (
                 (forall (?lP ?lPostureType)
                         ((hasArmPosture leftArm1 ?lP)
                          (Instance ?lPostureType ?lP)
                          (not (Instance ?left_arm_goal ?lP))
                          )
                         ((hasArmPosture leftArm1 ?nlPosture)
                          (Instance ?left_arm_goal ?nlPosture))
                         )
                 (forall (?rP ?rPostureType)
                         ((hasArmPosture rightArm1 ?rP)
                          (Instance ?rPostureType ?rP)
                          (not (Instance ?right_arm_goal ?rP))
                          )
                         ((hasArmPosture rightArm1 ?nrPosture)
                          (Instance ?right_arm_goal ?nrPosture))
                         )
                 (CNT ?cntn)
                 )
                )


     (:operator (!move_arms_to_carryposture)
                                        ; pre
                ((not (Instance TorsoDownPosture ?tdp))
                 (Instance Arm leftArm1)
                 (hasArmPosture leftArm1 ?oldLeftPosture)
                 (Instance ?oldLeftPostureType ?oldLeftPosture)
                 (Instance Arm rightArm1)
                 (hasArmPosture rightArm1 ?oldRightPosture)
                 (Instance ?oldRightPostureType ?oldRightPosture)
                 (CNT ?cnt)
                 (new_constant ?newLeftPosture ArmCarryPosture "l" ?cnt)
                 (new_constant ?newRightPosture ArmCarryPosture "r" ?cnt)
                 (inc_cnt ?cntn ?cnt)
                 )
                                        ; del
                ((forall (?lP ?oldLeftPostureType)
                         ((hasArmPosture leftArm1 ?lP)
                          (Instance ?oldLeftPostureType ?lP)
                          (not (Instance ArmCarryPosture ?lP))
                          )
                          ((hasArmPosture leftArm1 ?lP)
                           (Instance ?oldLeftPostureType ?lP))
                         )
                 (forall (?rP ?oldRightPostureType)
                         ((hasArmPosture rightArm1 ?rP)
                          (Instance ?oldRightPostureType ?rP)
                          (not (Instance ArmCarryPosture ?rP))
                          )
                          ((hasArmPosture rightArm1 ?rP)
                           (Instance ?oldRightPostureType ?rP))
                         )
                 (CNT ?cnt))
                                        ; add
                ((forall (?lP ?oldLeftPostureType)
                         ((hasArmPosture leftArm1 ?lP)
                          (Instance ?oldLeftPostureType ?lP)
                          (not (Instance ArmCarryPosture ?lP))
                          )
                         ((hasArmPosture leftArm1 ?newLeftPosture)
                          (Instance ArmCarryPosture ?newLeftPosture))
                         )
                 (forall (?rP ?oldRightPostureType)
                         ((hasArmPosture rightArm1 ?rP)
                          (Instance ?oldRightPostureType ?rP)
                          (not (Instance ArmCarryPosture ?rP))
                          )
                         ((hasArmPosture rightArm1 ?newRightPosture)
                          (Instance ArmCarryPosture ?newRightPosture))
                         )
                 (CNT ?cntn)))
     
     (:operator (!move_arm_to_side ?whicharm)
                                        ; pre
                (
                 (Instance Arm leftArm1)
                 (Instance Arm rightArm1)
                 (not ((HasArmPosture leftArm1 ?oldLeft) 
                       (Instance ArmTuckedPosture ?oldLeft) 
                       (HasArmPosture rightArm1 ?oldRight)
                       (Instance ArmTuckedPosture ?oldRight)))
                 (HasArmPosture ?whicharm ?old_posture)       
                 (Instance ?old_posture_type ?old_posture)
                 (CNT ?cnt)
                 (new_constant ?newPosture ArmToSidePosture ?cnt ?whicharm)
                 (inc_cnt ?cntn ?cnt)
                 ) 
                                        ; del
                ((HasArmPosture ?whicharm ?old_posture)
                 (Instance ?old_posture_type ?old_posture)
                 (CNT ?cnt))
                                        ; add
                ((Instance ArmToSidePosture ?newPosture)
                 (HasArmPosture ?whicharm ?newPosture)
                 (CNT ?cntn))
                )
     
     (:method (move_arm_to_side_method leftArm1)
       (
        (Instance Arm leftArm1)
        (HasArmPosture leftArm1 ?oldLeft) ; both arms are tucked
        (Instance ArmTuckedPosture ?oldLeft) 
        (Instance Arm rightArm1)
        (HasArmPosture rightArm1 ?oldRight)
        (Instance ArmTuckedPosture ?oldRight)
        )
       ; change 9.1.2015: move both ArmUntuckedPosture
       ((!tuck_arms ArmUnTuckedPosture ArmUnTuckedPosture)
        (:immediate !move_arm_to_side leftArm1))
       () ; not both arms are tucked
       ((!move_arm_to_side leftArm1))
       )
     
     (:method (move_arm_to_side_method rightArm1)
       (
        (Instance Arm leftArm1)
        (HasArmPosture leftArm1 ?oldLeft) ; both arms are tucked
        (Instance ArmTuckedPosture ?oldLeft) 
        (Instance Arm rightArm1)
        (HasArmPosture rightArm1 ?oldRight)
        (Instance ArmTuckedPosture ?oldRight))
        ((!tuck_arms ArmUnTuckedPosture ArmUnTuckedPosture)
         (:immediate !move_arm_to_side rightArm1))
       () ; not both arms are tucked
       ((!move_arm_to_side rightArm1))
       )    

     (:operator (!pick_up_object ?object ?arm)
                ((Instance On ?on)
                 (HasArea ?on ?placingArea)
                 (HasPhysicalEntity ?on ?object)
                 (Instance RobotAt ?robotat)
                 (HasRobot ?robotat trixi1)
                 (HasArea ?robotat ?manArea)
                 (Instance ManipulationArea ?manArea)
                 (Instance PlacingArea ?plArea)
                 (HasManipulationArea ?plArea ?manArea)
                 (Instance Arm ?arm)
                 (HasGripper ?arm ?gripper)
                 (not ((Instance Holding ?holding)
                       (HasGripper ?holding ?gripper)
                       (HasPassiveObject ?holding ?otherObject)
                      ))
                 (HasArmPosture ?arm ?armposture)
                 (Instance ArmToSidePosture ?armposture)
                 (Instance TorsoUpPosture ?torsoposture)
                 (Instance ?objtype ?object)
                 (not (hasAffordanceException ?objtype pick_up_object))
                 (CNT ?cnt)
                 (new_constant ?newHolding Holding ?cnt)
                 (new_constant ?newArmPosture ArmToSidePosture ?cnt ?arm)
                 (inc_cnt ?cntn ?cnt)
                 )
                ; del
                ((Instance On ?on)
                 (HasArea ?on ?placingArea)
                 (HasPhysicalEntity ?on ?object)
                 (Instance ArmToSidePosture ?armposture)
                 (hasArmPosture ?arm ?armposture)
                 (CNT ?cnt))
                ; add
                ((Instance Holding ?newHolding)
                 (HasGripper ?newHolding ?gripper)
                 (hasPassiveObject ?newHolding ?object)
                 (Instance ArmToSidePosture ?newArmPosture)
                 (hasArmPosture ?arm ?newArmPosture)
                 (CNT ?cntn)))

     (:operator (!place_object ?object ?arm ?placingArea)
                (
                 (Instance RobotAt ?robotat)
                 (HasRobot ?robotat trixi1)
                 (HasArea ?robotat ?manArea)
                 (Instance ManipulationArea ?manArea)
                 (Instance PlacingArea ?placingArea)
                 (HasManipulationArea ?placingArea ?manArea)
                 (HasGripper ?arm ?gripper)
                 (Instance Holding ?holding)
                 (HasGripper ?holding ?gripper)
                 (HasPassiveObject ?holding ?object)
                 (Instance Arm ?arm)
                 (HasArmPosture ?arm ?armposture)
                 (Instance ArmToSidePosture ?armposture)
                 (Instance TorsoUpPosture ?torsoposture)
                 (Instance ?objtype ?object)
                 (not (hasAffordanceException ?objtype place_object))
                 (CNT ?cnt)
                 (new_constant ?newOn On ?cnt)
                 (new_constant ?newArmPosture ArmToSidePosture ?cnt ?arm)
                 (inc_cnt ?cntn ?cnt)
                 )
                ; del
                ((Instance Holding ?holding)
                 (HasGripper ?holding ?gripper)
                 (HasPassiveObject ?holding ?object)
                 (Instance ArmToSidePosture ?armposture)
                 (hasArmPosture ?arm ?armposture)
                 (CNT ?cnt))
                ; add
                ((Instance On ?newOn)
                 (HasArea ?newOn ?placingArea)
                 (HasPhysicalEntity ?newOn ?object)
                 (Instance ArmToSidePosture ?newArmPosture)
                 (hasArmPosture ?arm ?newArmPosture)
                 (CNT ?cntn))
                )

     (:operator (!move_base ?to)
                ((Instance RobotAt ?robotat)
                 (HasRobot ?robotat trixi1)
                 (HasArea ?robotat ?from)
                 (CNT ?cnt)
                 (new_constant ?newrobotat RobotAt ?cnt)
                 (inc_cnt ?cntn ?cnt)
                 )
                ; del
                ((Instance RobotAt ?robotat)
                 (HasRobot ?robotat trixi1)
                 (HasArea ?robotat ?from)
                 (CNT ?cnt))
                ; add
                ((Instance RobotAt ?newrobotat)
                 (HasRobot ?newrobotat trixi1)
                 (HasArea ?newrobotat ?to)
                 (CNT ?cntn))
                )

      (:operator (!move_base_param ?to ?speed)
                ((Instance RobotAt ?robotat)
                 (HasRobot ?robotat trixi1)
                 (HasArea ?robotat ?from)
                                        ; assignments
                 (CNT ?cnt)
                 (new_constant ?newrobotat RobotAt ?cnt)
                 (inc_cnt ?cntn ?cnt)
                 )
                ((Instance RobotAt ?robotat)
                 (HasRobot ?robotat trixi1)
                 (HasArea ?robotat ?from)
                 (CNT ?cnt))
                ((Instance RobotAt ?newrobotat)
                 (HasRobot ?newrobotat trixi1)
                 (HasArea ?newrobotat ?to)
                 (CNT ?cntn))
                )

     (:operator (!move_base_blind ?to)
                ((Instance RobotAt ?robotat)
                 (HasRobot ?robotat trixi1)
                 (HasArea ?robotat ?from)
                 (CNT ?cnt)
                 (new_constant ?newrobotat RobotAt ?cnt)
                 (inc_cnt ?cntn ?cnt)
                 )
                ((Instance RobotAt ?robotat)
                 (HasRobot ?robotat trixi1)
                 (HasArea ?robotat ?from)
                 (CNT ?cnt))
                ((Instance RobotAt ?newrobotat)
                 (HasRobot ?newrobotat trixi1)
                 (HasArea ?newrobotat ?to)
                 (CNT ?cntn))
                )

     (:operator (!move_torso ?torsoPostureType)
                ((Instance Torso ?torso)
                 (HasTorsoPosture ?torso ?oldposture)
                 (Instance ?oldTorsoPostureType ?oldposture)
                                        ; assignments
                 (CNT ?cnt)
                 (new_constant ?newposture ?torsoPostureType ?cnt)
                 (inc_cnt ?cntn ?cnt)
                 )
                ; del
                ((HasTorsoPosture ?torso ?oldposture)
                 (Instance ?oldTorsoPostureType ?oldposture)
                 (CNT ?cnt))
                ; add
                ((HasTorsoPosture ?torso ?newposture)
                 (Instance ?torsoPostureType ?newposture)
                 (CNT ?cntn))
                ) 

     (:method (grasp_objects ?obj1 ?obj2)
       (; at ManipulationArea of both objects
        (Instance RobotAt ?robotat)
        (HasRobot ?robotat trixi1)
        (HasArea ?robotat ?robotArea)
        (Instance ManipulationArea ?robotArea)
        ; Areas of obj1 and obj2
        (Instance On ?obj1On)
        (HasPhysicalEntity ?obj1On ?obj1)
        (HasArea ?obj1On ?obj1Area)
        (HasManipulationArea ?obj1Area ?robotArea)
        (Instance On ?obj2On)
        (HasPhysicalEntity ?obj2On ?obj2)
        (HasArea ?obj2On ?obj2Area)
        (HasManipulationArea ?obj2Area ?robotArea)
        (or (eval (member '?obj2Area '(placingAreaEastLeftTable1
                                       placingAreaWestLeftTable1
                                       placingAreaNorthLeftTable2
                                       placingAreaSouthLeftTable2)))
            (eval (member '?obj1Area '(placingAreaEastRightTable1
                                       placingAreaWestRightTable1
                                       placingAreaNorthRightTable2
                                       placingAreaSouthRightTable2))))
         ; affordanceExceptions
        (Instance ?obj1type ?obj1)
        (not (hasAffordanceException ?obj1type grasp_objects))
        (Instance ?obj2type ?obj2)
        (not (hasAffordanceException ?obj2type grasp_objects))
        )
       ((assume_botharms_manipulation_pose ?manArea)
        (!observe_objects_on_area ?obj1Area)
        (:immediate !pick_up_object ?obj1 leftArm1)
        (:immediate !pick_up_object ?obj2 rightArm1)
        (leave_manipulation_pose ?manArea))
       )

     (:method (grasp_objects ?obj1 ?obj2)
       (; at PreManipulationArea of both objects (similar to method above)
        (Instance RobotAt ?robotat)
        (HasRobot ?robotat trixi1)
        (HasArea ?robotat ?robotArea)
        (Instance PreManipulationArea ?robotArea)
        (Instance On ?obj1On)
        (HasPhysicalEntity ?obj1On ?obj1)
        (HasArea ?obj1On ?obj1Area)
        (HasManipulationArea ?obj1Area ?manArea)
        (HasPreManipulationArea ?manArea ?robotArea)
        (Instance On ?obj2On)
        (HasPhysicalEntity ?obj2On ?obj2)
        (HasArea ?obj2On ?obj2Area)
        (HasManipulationArea ?obj2Area ?manArea)
        (or (eval (member '?obj2Area '(placingAreaEastLeftTable1    
                                       placingAreaWestLeftTable1
                                       placingAreaNorthLeftTable2
                                       placingAreaSouthLeftTable2)))
            (eval (member '?obj1Area '(placingAreaEastRightTable1
                                       placingAreaWestRightTable1
                                       placingAreaNorthRightTable2
                                       placingAreaSouthRightTable2))))
        ; affordanceExceptions
        (Instance ?obj1type ?obj1)
        (not (hasAffordanceException ?obj1type grasp_objects))
        (Instance ?obj2type ?obj2)
        (not (hasAffordanceException ?obj2type grasp_objects))
        )
       ((assume_botharms_manipulation_pose ?manArea)
        (!observe_objects_on_area ?obj1Area)
        (:immediate !pick_up_object ?obj1 leftArm1)
        (:immediate !pick_up_object ?obj2 rightArm1)
        (leave_manipulation_pose ?manArea))
       )

     (:method (grasp_objects ?obj1 ?obj2)
       (; at ManipulationArea of both objects
        (Instance RobotAt ?robotat)
        (HasRobot ?robotat trixi1)
        (HasArea ?robotat ?robotArea)
        (Instance ManipulationArea ?robotArea)
        (Instance On ?obj1On)
        (HasPhysicalEntity ?obj1On ?obj1)
        (HasArea ?obj1On ?obj1Area)
        (HasManipulationArea ?obj1Area ?robotArea)
        (Instance On ?obj2On)
        (HasPhysicalEntity ?obj2On ?obj2)
        (HasArea ?obj2On ?obj2Area)
        (HasManipulationArea ?obj2Area ?robotArea)
        (not (or (eval (member '?obj2Area '(placingAreaEastLeftTable1 
                                        placingAreaWestLeftTable1
                                        placingAreaNorthLeftTable2
                                        placingAreaSouthLeftTable2)))
             (eval (member '?obj1Area '(placingAreaEastRightTable1
                                        placingAreaWestRightTable1
                                        placingAreaNorthRightTable2
                                        placingAreaSouthRightTable2)))))
        (Instance ?obj1type ?obj1)
        (not (hasAffordanceException ?obj1type grasp_objects))
        (Instance ?obj2type ?obj2)
        (not (hasAffordanceException ?obj2type grasp_objects))
        )
       ((assume_botharms_manipulation_pose ?manArea)
        (!observe_objects_on_area ?obj1Area)
        (:immediate !pick_up_object ?obj1 rightArm1)
        (:immediate !pick_up_object ?obj2 leftArm1)
        (leave_manipulation_pose ?manArea))
       )

     (:method (grasp_objects ?obj1 ?obj2)
       (
        (Instance RobotAt ?robotat)
        (HasRobot ?robotat trixi1)
        (HasArea ?robotat ?robotArea)
        (Instance PreManipulationArea ?robotArea)
        (Instance On ?obj1On)
        (HasPhysicalEntity ?obj1On ?obj1)
        (HasArea ?obj1On ?obj1Area)
        (HasManipulationArea ?obj1Area ?manArea)
        (HasPreManipulationArea ?manArea ?robotArea)
        (Instance On ?obj2On)
        (HasPhysicalEntity ?obj2On ?obj2)
        (HasArea ?obj2On ?obj2Area)
        (HasManipulationArea ?obj2Area ?manArea)
        (not (or (eval (member '?obj2Area '(placingAreaEastLeftTable1 
                                            placingAreaWestLeftTable1
                                            placingAreaNorthLeftTable2
                                            placingAreaSouthLeftTable2)))
                 (eval (member '?obj1Area '(placingAreaEastRightTable1
                                            placingAreaWestRightTable1
                                            placingAreaNorthRightTable2
                                            placingAreaSouthRightTable2)))))
        ; affordanceExceptions
        (Instance ?obj1type ?obj1)
        (not (hasAffordanceException ?obj1type grasp_objects))
        (Instance ?obj2type ?obj2)
        (not (hasAffordanceException ?obj2type grasp_objects))
        )
       ((assume_botharms_manipulation_pose ?manArea)
        (!observe_objects_on_area ?obj1Area)
        (:immediate !pick_up_object ?obj1 rightArm1)
        (:immediate !pick_up_object ?obj2 leftArm1)
        (leave_manipulation_pose ?manArea))
       )
     
     (:method (grasp_object_w_arm ?object ?arm)
       (
        (Instance RobotAt ?robotat)
        (HasRobot ?robotat trixi1)
        (HasArea ?robotat ?robotArea)
        (Instance On ?on)
        (HasArea ?on ?placingArea)
        (HasPhysicalEntity ?on ?object)
        (HasManipulationArea ?placingArea ?manArea)
        (or ((Instance PreManipulationArea ?robotArea)
             (HasPreManipulationArea ?manArea ?robotArea))
            (same ?manArea ?robotArea))
        (HasGripper ?arm ?gripper)
        (not ((Instance Holding ?holding)
              (HasGripper ?holding ?gripper)))
        ; affordanceExceptions
        (Instance ?objtype ?object)
        (not (hasAffordanceException ?objtype grasp_object_w_arm))
        )
       ((assume_botharms_manipulation_pose ?manArea)  
        (!observe_objects_on_area ?placingArea)
        (:immediate !pick_up_object ?object ?arm)
        )
       )

     (:method (leave_manipulation_pose ?manArea)
       ((Instance RobotAt ?robotat)
        (HasRobot ?robotat trixi1)
        (HasArea ?robotat ?robotArea)
        (HasPreManipulationArea ?robotArea ?preArea)
        ) 
       ((!move_base_blind ?preArea))
       )

     (:method (assume_botharms_manipulation_pose ?manArea)
       ((Instance RobotAt ?robotat)
        (HasArea ?robotat ?manArea)
        (Instance ManipulationArea ?manArea)
        (Instance TorsoUpPosture ?torsoPosture)
        (Instance ArmToSidePosture ?leftPosture)
        (Instance ArmToSidePosture ?rightPosture)
        )
       ()
       )

     (:method (assume_botharms_manipulation_pose ?manArea)
       ((Instance RobotAt ?robotat)
        (HasArea ?robotat ?robotArea)
        (Instance PreManipulationArea ?robotArea)
        (HasPreManipulationArea ?manArea ?robotArea))
       (
        (adapt_torso TorsoUpPosture)
        (botharms_assume_manipulation_pose)
        (!move_base_blind ?manArea))
       )
     
     (:method (assume_botharms_manipulation_pose ?manArea)
       ((Instance RobotAt ?robotat)
        (HasArea ?robotat ?manArea)
        (HasPreManipulationArea ?manArea ?preArea)
        (HasArmPosture leftArm1 ?leftPosture)
        (HasArmPosture rightArm1 ?rightPosture)
        (or (not (Instance TorsoUpPosture ?torsoPosture))
            (not (Instance ArmToSidePosture ?leftPosture))
            (not (Instance ArmToSidePosture ?rightPosture)))
        (Instance PreManipulationArea ?preArea))
       ((mprint )
        (!move_base_blind ?preArea)
        (adapt_torso TorsoUpPosture)
        (botharms_assume_manipulation_pose)
        (!move_base_blind ?manArea))
       )

     (:method (assume_tray_manipulation_pose ?manArea)
       ((Instance RobotAt ?robotat)
        (HasArea ?robotat ?preArea)
        (Instance ManipulationArea ?manArea)
	(Instance PreManipulationArea ?preArea)
	(HasPreManipulationArea ?manArea ?preArea)
        )
       (
	(adapt_torso TorsoUpPosture)
        (botharms_assume_manipulation_pose)
	)
       )

     (:method (assume_tray_manipulation_pose ?manArea)
       ((Instance RobotAt ?robotat)
        (HasArea ?robotat ?robotArea)
        (Instance ManipulationArea ?robotArea)
	(Instance PreManipulationArea ?preArea)
	(HasPreManipulationArea ?manArea ?preArea))
       (
	(!move_base_blind ?preArea)
        (adapt_torso TorsoUpPosture)
        (botharms_assume_manipulation_pose)
      )
     )

     (:method (botharms_assume_manipulation_pose)
       ((Instance Arm leftArm1)
        (HasArmPosture leftArm1 ?leftPosture)
        (not (Instance ArmToSidePosture ?leftPosture))
        (Instance Arm rightArm1)
        (HasArmPosture rightArm1 ?rightPosture)
        (not (Instance ArmToSidePosture ?rightPosture))
        )
       ((move_arm_to_side_method leftArm1)
        (move_arm_to_side_method rightArm1)
        )
       )
     
     (:method (botharms_assume_manipulation_pose)
       ((Instance Arm leftArm1)
        (HasArmPosture leftArm1 ?leftPosture)
        (Instance ArmToSidePosture ?leftPosture)
        (Instance Arm rightArm1)
        (HasArmPosture rightArm1 ?rightPosture)
        (not (Instance ArmToSidePosture ?rightPosture))
        )
       ((move_arm_to_side_method rightArm1)
        )
       )

     (:method (botharms_assume_manipulation_pose)
       ((Instance Arm leftArm1)
        (HasArmPosture leftArm1 ?leftPosture)
        (not (Instance ArmToSidePosture ?leftPosture))
        (Instance Arm rightArm1)
        (HasArmPosture rightArm1 ?rightPosture)
        (Instance ArmToSidePosture ?rightPosture)
        )
       ((move_arm_to_side_method leftArm1)
        )
       )

     (:method (botharms_assume_manipulation_pose)
       ((Instance Arm leftArm1)
        (HasArmPosture leftArm1 ?leftPosture)
        (Instance ArmToSidePosture ?leftPosture)
        (Instance Arm rightArm1)
        (HasArmPosture rightArm1 ?rightPosture)
        (Instance ArmToSidePosture ?rightPosture)
        )
       ()
       )
     
     (:method (arm_assume_manipulation_pose ?arm)
       ((Instance Arm ?arm)
        (HasArmPosture ?arm ?armPosture)
        (not (Instance ArmToSidePosture ?armPosture))
        (Instance Arm ?otherarm)
        (different ?arm ?otherarm) 
        (or (Instance ArmUntuckedPosture ?otherarm) 
            (Instance ArmUnnamedPosture ?otherarm))
        )
       ((move_arm_to_side_method ?arm)
        (move_arm_to_side_method ?otherarm)
        )
       )
     
     (:method (arm_assume_manipulation_pose ?arm)
       ((Instance Arm ?arm)
        (HasArmPosture ?arm ?armPosture)
        (not (Instance ArmToSidePosture ?armPosture))
        (Instance Arm ?otherarm)
        (different ?arm ?otherarm)
        (HasArmPosture ?otherarm ?otherPosture)
        (not (or (Instance ArmUntuckedPosture ?otherPosture) 
                 (Instance ArmUnnamedPosture ?otherPosture)))
        )
       ((move_arm_to_side_method ?arm))
       )
     
     (:method (arm_assume_manipulation_pose ?arm)
       ((Instance Arm ?arm)
        (HasArmPosture ?arm ?armPosture)
        (Instance ArmToSidePosture ?armPosture)
        )
       ()
       )

     (:method (assume_manipulation_pose ?manArea ?arm)
       ((Instance RobotAt ?robotat)
        (HasArea ?robotat ?manArea)
        (Instance TorsoUpPosture ?torsoPosture)
        (HasArmPosture ?arm ?armPosture)
        (Instance ArmToSidePosture ?armPosture)
        )
       ()
       )
     
     (:method (assume_manipulation_pose ?manArea ?arm)
       ((Instance RobotAt ?robotat)
        (HasArea ?robotat ?robotArea)
        (Instance PreManipulationArea ?robotArea)
        (HasPreManipulationArea ?manArea ?robotArea))
       (
        (adapt_torso TorsoUpPosture)
        (arm_assume_manipulation_pose ?arm)
        (!move_base_blind ?manArea))
       )

     (:method (assume_manipulation_pose ?manArea ?arm)
       ((Instance RobotAt ?robotat)
        (HasArea ?robotat ?manArea)
        (HasPreManipulationArea ?manArea ?preArea)
        (HasArmPosture ?arm ?armPosture)
        (or (not (Instance TorsoUpPosture ?torsoPosture))
            (not (Instance ArmToSidePosture ?armPosture)))
        (Instance PreManipulationArea ?preArea))
       ((!move_base_blind ?preArea)
        (adapt_torso TorsoUpPosture)
        (arm_assume_manipulation_pose ?arm)
        (!move_base_blind ?manArea))
       )
     
     (:method (drive_robot ?to)
       ((Instance RobotAt ?robotat)
        (HasRobot ?robotat trixi1)
        (HasArea ?robotat ?to))
       ())

     (:method (drive_robot ?to)
       ((Instance RobotAt ?robotat)
        (HasRobot ?robotat trixi1)
        (HasArea ?robotat ?robotArea)
        (different ?robotArea ?to)
        (not (Instance ManipulationArea ?robotArea))
        )
       ((arms_assume_driving_pose)     
	(:immediate torso_assume_driving_pose) 
        (:immediate !move_base ?to))
       )

     (:method (drive_robot ?to)
       ((Instance RobotAt ?robotat)
        (HasRobot ?robotat trixi1)
        (HasArea ?robotat ?robotArea)
        (different ?robotArea ?to)
        (Instance ManipulationArea ?robotArea)
        (HasPreManipulationArea ?robotArea ?preArea)
        )
       ((!move_base_blind ?preArea)
	(:immediate arms_assume_driving_pose)
        (:immediate torso_assume_driving_pose)
        (:immediate !move_base ?to)
        )
       )

     (:method (drive_robot_param ?to ?speed)
       ((Instance RobotAt ?robotat)
        (HasRobot ?robotat trixi1)
        (HasArea ?robotat ?to))
       ())

     (:method (drive_robot_param ?to ?speed)
       ((Instance RobotAt ?robotat)
        (HasRobot ?robotat trixi1)
        (HasArea ?robotat ?robotArea)
        (different ?robotArea ?to)
        (not (Instance ManipulationArea ?robotArea))
        )
       (
        (arms_assume_driving_pose)   
	(:immediate torso_assume_driving_pose)
        (:immediate !move_base_param ?to ?speed))
       )

     (:method (drive_robot_param ?to ?speed)
       ((Instance RobotAt ?robotat)
        (HasRobot ?robotat trixi1)
        (HasArea ?robotat ?robotArea)
        (different ?robotArea ?to)
        (Instance ManipulationArea ?robotArea)
        (HasPreManipulationArea ?robotArea ?preArea)
        )
       ((!move_base_blind ?preArea)
	(:immediate arms_assume_driving_pose)    
        (:immediate torso_assume_driving_pose)
        (:immediate !move_base_param ?to ?speed)
        )
       )
     
     (:method (adapt_torso ?torsoPose)
       (
        (not (Instance ?torsoPose ?torso))
        )
       ((!move_torso ?torsoPose))
       )
     
     (:method (adapt_torso ?torsoPose)
       (
        (Instance ?torsoPose ?torso)
        )
       ()
       )

     (:method (adapt_arms ArmTuckedPosture)
       ((Instance Arm leftArm1)
        (HasArmPosture leftArm1 ?leftPosture)
        (Instance ArmTuckedPosture ?leftPosture)
        (Instance Arm rightArm1)
        (HasArmPosture rightArm1 ?rightPosture)
        (Instance ArmTuckedPosture ?rightPosture)
        )
       ()
       )
     
     (:method (adapt_arms ArmTuckedPosture)
       ((Instance Arm leftArm1)
        (HasArmPosture leftArm1 ?leftPosture)
        (Instance Arm rightArm1)
        (HasArmPosture rightArm1 ?rightPosture)
        (OR (not (Instance ArmTuckedPosture ?leftPosture))
            (not (Instance ArmTuckedPosture ?rightPosture)))
        )
       ((!tuck_arms ArmTuckedPosture ArmTuckedPosture))
       )

     (:method (adapt_arms ArmCarryPosture)
       ((Instance Arm leftArm1)
        (HasArmPosture leftArm1 ?leftPosture)
        (Instance ArmCarryPosture ?leftPosture)
        (Instance Arm rightArm1)
        (HasArmPosture rightArm1 ?rightPosture)
        (Instance ArmCarryPosture ?rightPosture)
        )
       ()
       )

     (:method (adapt_arms ArmCarryPosture)
       ((Instance Arm leftArm1)
        (HasArmPosture leftArm1 ?leftPosture)
        (Instance Arm rightArm1)
        (HasArmPosture rightArm1 ?rightPosture)
        (OR (not (Instance ArmCarryPosture ?leftPosture))
            (not (Instance ArmCarryPosture ?rightPosture)))
        )
       ((!move_arms_to_carryposture))
       )

     (:method (torso_assume_driving_pose)
       ((Instance TrayArea ?trayArea)
        (Instance On ?on)              
        (HasArea ?on ?trayArea)
        (HasPhysicalEntity ?on ?object)
        )
       ((adapt_torso TorsoUpPosture))
     )
     
     (:method (torso_assume_driving_pose)
       ((not ((Instance TrayArea ?trayArea)
              (Instance On ?on)                
              (HasArea ?on ?trayArea)
              (HasPhysicalEntity ?on ?object)))
        (Instance Holding ?holding)            
        )
       ((adapt_torso TorsoMiddlePosture)))

     (:method (torso_assume_driving_pose)
       ((not ((Instance TrayArea ?trayArea)
              (Instance On ?on)             
              (HasArea ?on ?trayArea)
              (HasPhysicalEntity ?on ?object)))
        (not (Instance Holding ?holding))            
        )
       ((adapt_torso TorsoDownPosture)))

     (:method (arms_assume_driving_pose)
       (
        (not (Instance Holding ?holding))            
        )
       ((adapt_arms ArmTuckedPosture)))
     
     (:method (arms_assume_driving_pose)
       ((not ((Instance TrayArea ?trayArea)
              (Instance On ?on)           
              (HasArea ?on ?trayArea)
              (HasPhysicalEntity ?on ?object)))
        (Instance Holding ?holding)            
        )
       ((adapt_arms ArmCarryPosture)))

     (:- (mugs_on_area ?area)
         ((HasArea ?on ?area)
          (Instance On ?on)
          (HasPhysicalEntity ?on ?obj)
          (Instance Mug ?obj)
          ))

     (:- (two_mugs_reachable_from ?manArea)
         (Instance ManipulationArea ?manArea)
         (HasManipulationArea ?pa1 ?manArea)
         (Instance PlacingArea ?pa1)
         (HasArea ?on1 ?pa1)
         (Instance On ?on1)
         (HasPhysicalEntity ?on1 ?obj1)
         (Instance Mug ?obj1)
         (HasManipulationArea ?pa2 ?manArea)
         (Instance PlacingArea ?pa2)
         (HasArea ?on2 ?pa2)
         (Instance On ?on2)
         (HasPhysicalEntity ?on2 ?obj2)
         (Instance Mug ?obj2))
     
     (:- (same ?x ?x) ())
     
     (:- (different ?x ?y) ((not (same ?x ?y))))
     
     (:method (serve_coffee_to_guest ?guest)
       (
        (Instance Mug ?coffee)
        (or
          ((Instance On ?on)
           (HasPhysicalEntity ?on ?coffee)
           (HasArea ?on ?fromPlacingArea))
          ((Instance Holding ?holding)
           (hasPassiveObject ?holding ?coffee))
          )
        (Instance PlacingArea ?fromPlacingArea)
        (HasPlacingArea ?counter ?fromPlacingArea)
        (Instance Counter ?counter)
        (Instance At ?at)
        (HasPhysicalEntity ?at ?guest)
        (HasArea ?at ?sittingArea)
        (Instance SittingArea ?sittingArea)
        (HasPlacingAreaRight ?sittingArea ?toPlacingArea)
        (Instance PlacingArea ?toPlacingArea)
        )
       ((move_object ?coffee ?toPlacingArea))
       )

     (:method (clear_table ?table ?counter)
       ((Instance Tray ?tray)
        (Instance Arm ?arm)
        (HasGripper ?arm ?gripper)
        (Instance Holding ?holding)
        (HasGripper ?holding ?gripper)
        (HasPassiveObject ?holding ?tray))
       ((clear_table_w_tray ?table ?counter))
       ()
       ((clear_table_w_hand ?table ?counter))
       )

     ; holding an object, place it on the counter
     (:method (clear_table_w_hand ?table ?counter)
       ((hasPlacingArea ?counter ?plArea)
        (Instance Holding ?holding)
        (hasPassiveObject ?holding ?obj))
       ((put_object ?obj ?plArea)
        (!replan clear_table_w_hand ?table ?counter))
       )

     (:method (clear_table_w_hand ?table ?counter)
       (
        (not ((Instance RobotAt ?robotAt)
              (hasArea ?robotAt ?robotArea)
              (hasManipulationArea ?table ?robotArea))
             )
        (or (hasManipulationAreaSouth ?table ?manArea)
            (hasManipulationAreaEast ?table ?manArea))
        (Instance ManipulationArea ?manArea)
        (hasPremanipulationArea ?manArea ?preManArea)
        (hasManipulationArea ?placingArea ?manArea)
       )
       ((drive_robot ?preManArea)
        (assume_botharms_manipulation_pose ?manArea)
        (!observe_objects_on_area ?obj1Area)
        (!replan clear_table_w_hand ?table ?counter))
       )

     (:method (clear_table_w_hand ?table ?counter)
       (
        (Instance RobotAt ?robotAt)
        (hasArea ?robotAt ?robotArea)
        (hasManipulationArea ?table ?robotArea)
        (Instance ManipulationArea ?robotArea)
        (hasManipulationArea ?placingArea1 ?robotArea)
        (hasManipulationArea ?placingArea2 ?robotArea)
        (different ?placingArea1 ?placingArea2)
        (hasArea ?on1 ?placingArea1)
        (Instance On ?on1)
        (hasPhysicalEntity ?on1 ?obj1)
        (Instance ?type_obj1 ?obj1)
        (not (hasAffordanceException ?type_obj1 clear_table))
        (hasArea ?on2 ?placingArea2)
        (Instance On ?on2)
        (hasPhysicalEntity ?on2 ?obj2)
        (Instance ?type_obj2 ?obj2)
        (not (hasAffordanceException ?type_obj2 clear_table))
        (hasPlacingArea ?counter ?toPlacingArea)
        )
       (
        (grasp_objects ?obj1 ?obj2)
        (put_both_objects ?toPlacingArea)
        (clear_table_drive_back ?robotArea ?table)
        (!replan clear_table_w_hand ?table ?counter)
        )
       )

     (:method (clear_table_w_hand ?table ?counter)
       (
        (Instance RobotAt ?robotAt)
        (hasArea ?robotAt ?robotArea)
        (hasManipulationArea ?table ?robotArea)
        (Instance ManipulationArea ?robotArea)
        (hasManipulationArea ?placingArea1 ?robotArea)
        (hasManipulationArea ?placingArea2 ?robotArea)
        (different ?placingArea1 ?placingArea2)
        (hasArea ?on1 ?placingArea1)
        (Instance On ?on1)
        (hasPhysicalEntity ?on1 ?obj1)
        (Instance ?type_obj1 ?obj1)
        (not (hasAffordanceException ?type_obj1 clear_table))
        (not ((hasArea ?on2 ?placingArea2)
              (Instance On ?on2)
              (hasPhysicalEntity ?on2 ?obj2)
              (Instance ?type_obj2 ?obj2)
              (not (hasAffordanceException ?type_obj2 clear_table))))
        (hasPlacingArea ?counter ?toPlacingArea)
       )
       (
        (grasp_object ?obj1)
        (put_object ?obj1 ?toPlacingArea)
        (clear_table_drive_back ?robotArea ?table)
        (!replan clear_table_w_hand ?table ?counter)
        )
       )

     (:method (clear_table_w_hand ?table ?counter)
       (
        (Instance RobotAt ?robotAt)
        (hasArea ?robotAt ?robotArea)
        (or (hasManipulationAreaNorth ?table ?robotArea)
            (hasManipulationAreaWesth ?table ?robotArea)
            )
        (Instance ManipulationArea ?robotArea)
        (not ((hasPlacingArea ?table ?plArea)
              (hasArea ?on ?plArea)
              (Instance On ?on)
              (hasPhysicalEntity ?on ?obj)
              (Instance ?type_obj ?obj)
              (not (hasAffordanceException ?type_obj clear_table))))
       )
       (
        (leave_manipulation_pose ?robotArea)
        )
       )

     (:method (clear_table_w_hand ?table ?counter)
       (
        (Instance RobotAt ?robotAt)
        (hasArea ?robotAt ?robotArea)
        (or (hasManipulationAreaNorth ?table ?robotArea)
            (hasManipulationAreaWesth ?table ?robotArea)
            )
        (Instance ManipulationArea ?robotArea)
        (not ((hasManipulationArea ?plArea ?robotArea)
              (hasArea ?on1 ?plArea)
              (Instance On ?on1)
              (hasPhysicalEntity ?on1 ?obj1)
              (Instance ?type_obj1 ?obj1)
              (not (hasAffordanceException ?type_obj1 clear_table))))
        (or (hasManipulationAreaSouth ?table ?otherManArea)
            (hasManipulationAreaEast ?table ?otherManArea))
        (Instance ManipulationArea ?otherManArea)
        (hasManipulationArea ?otherPlArea ?otherManArea)
        (hasArea ?on2 ?otherPlArea)
        (Instance On ?on2)
        (hasPhysicalEntity ?on2 ?obj2)
        (Instance ?type_obj2 ?obj2)
        (not (hasAffordanceException ?type_obj2 clear_table))
        (hasPremanipulationArea ?otherManArea ?otherPreArea)
       )
       (
        (leave_manipulation_pose ?robotArea)
        (drive_robot ?otherPreArea)
        (assume_botharms_manipulation_pose ?otherManArea)
        (!observe_objects_on_area ?otherPlArea)
        (!replan clear_table_w_hand ?table ?counter)
        )
       )

     (:method (clear_table_w_hand ?table ?counter)
       (
        (Instance RobotAt ?robotAt)
        (hasArea ?robotAt ?robotArea)
        (or (hasManipulationAreaSouth ?table ?robotArea)
            (hasManipulationAreaEasth ?table ?robotArea)
            )
        (Instance ManipulationArea ?robotArea)
        (not ((hasManipulationArea ?plArea ?robotArea)
              (hasArea ?on ?plArea)
              (Instance On ?on)
              (hasPhysicalEntity ?on ?obj1)
              (Instance ?type_obj1 ?obj1)
              (not (hasAffordanceException ?type_obj1 clear_table))))
       )
       (
        (leave_manipulation_pose ?robotArea)
        (clear_table_drive_back ?robotArea ?table)
        (!replan clear_table_w_hand ?table ?counter)
        )
       )  

     (:method (clear_table_drive_back ?previousManArea ?table)
       ((Instance ManipulationArea ?previousManArea)
        (hasManipulationArea ?placingArea ?previousManArea)
        (hasArea ?on ?placingArea)
        (Instance On ?on)
        (hasPhysicalEntity ?on ?obj1)
        (Instance ?type_obj1 ?obj1)
        (not (hasAffordanceException ?type_obj1 clear_table))
        (hasPremanipulationArea ?previousManArea ?preArea)
        )
       ((drive_robot ?preArea)
        (assume_botharms_manipulation_pose ?previousManArea)
        (!observe_objects_on_area ?placingArea)
        )
       (
        (Instance ManipulationArea ?previousManArea)
        (not ((hasManipulationArea ?placingArea ?previousManArea)
              (hasArea ?on ?placingArea)
              (Instance On ?on)
              (hasPhysicalEntity ?on ?obj1)
              (Instance ?type_obj1 ?obj1)
              (not (hasAffordanceException ?type_obj1 clear_table))))
        (or (hasManipulationAreaNorth ?table ?oppositeManArea)
            (hasManipulationAreaWest ?table ?oppositeManArea))
        (hasPremanipulationArea ?oppositeManArea ?preArea)
        (hasManipulationArea ?oppositePlacingArea ?oppositeManArea)
        )
       ((drive_robot ?preArea)
        (assume_botharms_manipulation_pose ?oppositeManArea)
        (!observe_objects_on_area ?oppositePlacingArea))
       )

     (:method (grasp_object ?object)
       ((hasPhysicalEntity ?on ?object)
        (Instance On ?on)
        (hasArea ?on ?onArea)
        (hasPlacingAreaRight ?sittingArea ?onArea)
        (Instance Arm rightArm1)
        ; affordanceExceptions
        (Instance ?objtype ?object)
        (not (hasAffordanceException ?objtype grasp_object))
       )
       ((grasp_object_w_arm ?object leftArm1))
       ((Instance Arm rightArm1))
       ((grasp_object_w_arm ?object rightArm1))
       )

     (:method (move_object ?object ?toPlacingArea)
                                        ; use the left arm
       ((Instance On ?on)
        (HasPhysicalEntity ?on ?object)
        (HasArea ?on ?fromArea)
        (or (eval (member '?fromArea '(placingAreaEastLeftTable1
                                       placingAreaWestLeftTable1
                                       placingAreaNorthLeftTable2
                                       placingAreaSouthLeftTable2)))
            (eval (member '?toPlacingArea '(placingAreaEastLeftTable1
                                            placingAreaWestLeftTable1
                                            placingAreaNorthLeftTable2
                                            placingAreaSouthLeftTable2)))
            )
        (Instance Arm leftArm1)
        ; affordanceExceptions
        (Instance ?objtype ?object)
        (not (hasAffordanceException ?objtype move_object))
        )
       ((get_object_w_arm ?object leftarm1)
        (put_object ?object ?toPlacingArea))
                                        ; use right arm
       ((Instance Arm rightArm1)
        ; affordanceExceptions
        (Instance ?objtype ?object)
        (not (hasAffordanceException ?objtype move_object))
        )
       ((get_object_w_arm ?object rightarm1)
        (put_object ?object ?toPlacingArea))
       )

     (:method (move_object ?object ?toPlacingArea)
       ((Instance Holding ?holding)
        (HasPassiveObject ?holding ?object)
        ; affordanceExceptions
        (Instance ?objtype ?object)
        (not (hasAffordanceException ?objtype move_object))
        )
       ((put_object ?object ?toPlacingArea))
       )

     (:method (move_object_imagine ?object ?toPlacingArea)
       ((Instance Tray ?tray)
        ; affordanceExceptions
        (Instance ?objtype ?object)
        (HasManipulationArea ?toPlacingArea ?manArea)
        (HasPreManipulationArea ?manArea ?preArea)
        (not (hasAffordanceException ?objtype move_object_imagine))
        )
       ((!imagine !move_base_param ?preArea slow/fast)
        (get_object_w_tray ?object)
        (put_object ?object ?toPlacingArea)
        )
       )

     (:method (move_object_w_tray ?object ?toPlacingArea)
       ((Instance Tray ?tray)
        ; affordanceExceptions
        (Instance ?objtype ?object)
        (not (hasAffordanceException ?objtype move_object_w_tray))
        )
       ((get_object_w_tray ?object)
        (put_object ?object ?toPlacingArea)
        )
       )
     
     (:method (move_object_w_tray ?object ?toPlacingArea)
       ((Instance On ?on)
        (HasArea ?on ?trayArea)
        (HasPhysicalEntity ?on ?object)
        (Instance TrayArea ?trayArea)
        ; affordanceExceptions
        (Instance ?objtype ?object)
        (not (hasAffordanceException ?objtype move_object))
        )
       ((put_object ?object ?toPlacingArea))
       )

     (:method (get_object_w_tray ?object)
       ((Instance Tray ?tray)
        (Instance TrayArea ?trayArea)
	; new 9.1.2015: get prearea
	(HasPhysicalEntity ?on ?object)
        (Instance On ?on)
        (HasArea ?on ?fromPlacingArea)
	(Instance PlacingArea ?fromPlacingArea)
        (HasManipulationArea ?fromPlacingArea ?fromManArea)
	(Instance ManipulationArea ?fromManArea)
        (HasPreManipulationArea ?fromManArea ?fromPreArea)
	(Instance PreManipulationArea ?fromPreArea)
	)
       ((get_object_w_arm ?object leftArm1)
	(!move_base_blind ?fromPreArea)  
        (!place_on_tray ?object leftArm1 ?trayArea)))

     (:method (get_object_w_arm ?object ?arm)
       ((HasGripper ?arm ?gripper)
        (Instance Holding ?holding)
        (HasGripper ?holding ?gripper)
        (HasPassiveObject ?holding ?object)
        ; affordanceExceptions
        (Instance ?objtype ?object)
        (not (hasAffordanceException ?objtype get_object_w_arm))
        )
       ())

     (:method (get_object_w_arm ?object ?arm)
       ((HasGripper ?arm ?gripper)
        (Instance Holding ?holding)
        (HasGripper ?holding ?gripper)
        (HasPassiveObject ?holding ?other)
        (different ?object ?other)
        (Instance Counter ?counter)
        (HasPlacingArea ?counter ?counterArea)

        (HasPhysicalEntity ?on ?object)
        (Instance On ?on)
        (HasArea ?on ?fromPlacingArea)
        (HasManipulationArea ?fromPlacingArea ?fromManArea)
        (HasPreManipulationArea ?fromManArea ?fromPreArea)
        (Instance ?objtype ?object)
        (not (hasAffordanceException ?objtype get_object_w_arm))
        )
       ((put_object ?other ?counterarea)
        (drive_robot ?fromPreArea)
        (:immediate grasp_object_w_arm ?object ?arm)
        )
       )
     
     (:method (get_object_w_arm ?object ?arm)
       (
        (HasPhysicalEntity ?on ?object)
        (Instance On ?on)
        (HasArea ?on ?fromPlacingArea)
        (HasManipulationArea ?fromPlacingArea ?fromManArea)
        (HasPreManipulationArea ?fromManArea ?fromPreArea)
        (Instance RobotAt ?robotAt)
        (HasRobot ?robotAt trixi1)
        (HasArea ?robotAt ?fromPreArea)
                ; affordanceExceptions
        (Instance ?objtype ?object)
        (not (hasAffordanceException ?objtype get_object_w_arm))
        )
       ((grasp_object_w_arm ?object ?arm))
       (
        (HasPhysicalEntity ?on ?object)
        (Instance On ?on)
        (HasArea ?on ?fromPlacingArea)
        (HasManipulationArea ?fromPlacingArea ?fromManArea)
        (HasPreManipulationArea ?fromManArea ?fromPreArea)
        (Instance RobotAt ?robotAt)
        (HasRobot ?robotAt trixi1)
        (HasArea ?robotAt ?robotArea)
        (different ?robotArea ?fromPreArea)
                ; affordanceExceptions
        (Instance ?objtype ?object)
        (not (hasAffordanceException ?objtype get_object_w_arm))
        )
       ((drive_robot ?fromPreArea) (:immediate grasp_object_w_arm ?object ?arm))
       )

     (:method (put_object ?object ?toPlacingArea)
       ((Instance Holding ?holding)
        (HasPassiveObject ?holding ?object)
        (HasManipulationArea ?toPlacingArea ?manArea)
        (HasPreManipulationArea ?manArea ?preArea)
        (Instance RobotAt ?robotAt)
        (HasRobot ?robotAt trixi1)
        (not (HasArea ?robotAt ?preArea))
        (not (HasArea ?robotAt ?manArea))
        ; affordanceExceptions
        (Instance ?objtype ?object)
        (not (hasAffordanceException ?objtype put_object))
       )
       ((drive_robot ?preArea)
        (assume_manipulation_pose ?manArea ?arm)
        (!place_object ?object ?arm ?toPlacingArea)
        )
       )

     (:method (put_object ?object ?toPlacingArea)
       ((Instance Holding ?holding)
        (HasPassiveObject ?holding ?object)
        (HasGripper ?holding ?gripper)
        (HasGripper ?arm ?gripper)
        (Instance Arm ?arm)
        (HasManipulationArea ?toPlacingArea ?manArea)
        (HasPreManipulationArea ?manArea ?preArea)
        (Instance RobotAt ?robotAt)
        (HasRobot ?robotAt trixi1)
        (HasArea ?robotAt ?preArea)
        (Instance ?objtype ?object)
        (not (hasAffordanceException ?objtype put_object))
        )
       ((assume_manipulation_pose ?manArea ?arm)
        (!place_object ?object ?arm ?toPlacingArea))
       )

     (:method (put_object ?object ?toPlacingArea)
       ((Instance Holding ?holding)
        (HasPassiveObject ?holding ?object)
        (HasGripper ?holding ?gripper)
        (HasGripper ?arm ?gripper)
        (Instance Arm ?arm)
        (HasManipulationArea ?toPlacingArea ?manArea)
        (Instance RobotAt ?robotAt)
        (HasRobot ?robotAt trixi1)
        (HasArea ?robotAt ?manArea)
        (Instance ?objtype ?object)
        (not (hasAffordanceException ?objtype put_object))
        )
       ((!place_object ?object ?arm ?toPlacingArea)
        )
       )

     (:method (put_object ?object ?toPlacingArea)
       ((Instance On ?on)
        (HasArea ?on ?trayArea)
        (HasPhysicalEntity ?on ?object)
        (Instance TrayArea ?trayArea)
        (HasManipulationArea ?toPlacingArea ?manArea)
        (HasPreManipulationArea ?manArea ?preArea)
        (Instance RobotAt ?robotAt)
        (HasRobot ?robotAt trixi1)
        (not (HasArea ?robotAt ?preArea))
        (not (HasArea ?robotAt ?manArea))
        (Instance ?objtype ?object)
        (not (hasAffordanceException ?objtype put_object))
       )
       ((drive_robot_param ?preArea fast)
        (assume_tray_manipulation_pose ?manArea)  
        (!pick_from_tray ?object leftArm1 ?trayArea)
	(!move_base_blind ?manArea)
        (!place_object ?object leftArm1 ?toPlacingArea)
        )
       )

     (:method (put_object ?object ?toPlacingArea)
       ((Instance On ?on)
        (HasArea ?on ?trayArea)
        (HasPhysicalEntity ?on ?object)
        (Instance TrayArea ?trayArea)
        (Instance Arm ?arm)
        (HasManipulationArea ?toPlacingArea ?manArea)
        (HasPreManipulationArea ?manArea ?preArea)
        (Instance RobotAt ?robotAt)
        (HasRobot ?robotAt trixi1)
        (HasArea ?robotAt ?preArea)
        (Instance ?objtype ?object)
        (not (hasAffordanceException ?objtype put_object))
        )
       ((assume_tray_manipulation_pose ?manArea)   
        (!pick_from_tray ?object ?arm ?trayArea)
	(!move_base_blind ?manArea)               
        (!place_object ?object ?arm ?toPlacingArea))
       )

     (:method (put_object ?object ?toPlacingArea)
       ((Instance On ?on)
        (HasArea ?on ?trayArea)
        (HasPhysicalEntity ?on ?object)
        (Instance TrayArea ?trayArea)
        (Instance Arm ?arm)
        (HasManipulationArea ?toPlacingArea ?manArea)
        (Instance RobotAt ?robotAt)
        (HasRobot ?robotAt trixi1)
        (HasArea ?robotAt ?manArea)
        (Instance ?objtype ?object)
        (not (hasAffordanceException ?objtype put_object))
        )
       ((assume_tray_manipulation_pose ?manArea) 
	(!pick_from_tray ?object ?arm ?trayArea)
	(!move_base_blind ?manArea)             
        (!place_object ?object ?arm ?toPlacingArea)
        )
       )

     (:method (put_both_objects ?toPlacingArea)
       ((HasManipulationArea ?toPlacingArea ?manArea)
        (HasPreManipulationArea ?manArea ?preArea)
        (Instance RobotAt ?robotAt)
        (HasRobot ?robotAt trixi1)
        (not (HasArea ?robotAt ?manArea))
        (not (HasArea ?robotAt ?preArea)))
       ((drive_robot ?preArea)
        (assume_botharms_manipulation_pose ?manArea)
        (!place_object ?obj1 leftArm1 ?toPlacingArea)
        (:immediate !place_object ?obj2 rightArm1 ?toPlacingArea)
        )
       )

     (:method (put_both_objects ?toPlacingArea)
       ((HasManipulationArea ?toPlacingArea ?manArea)
        (HasPreManipulationArea ?manArea ?preArea)
        (Instance RobotAt ?robotAt)
        (HasRobot ?robotAt trixi1)
        (HasArea ?robotAt ?preArea))
       ((assume_botharms_manipulation_pose ?manArea)
        (!place_object ?obj1 leftArm1 ?toPlacingArea)
        (:immediate !place_object ?obj2 rightArm1 ?toPlacingArea))
       )

     (:method (put_both_objects ?toPlacingArea)
       ((HasManipulationArea ?toPlacingArea ?manArea)
        (Instance RobotAt ?robotAt)
        (HasRobot ?robotAt trixi1)
        (HasArea ?robotAt ?manArea)
        (Instance Arm leftArm1)
        (HasGripper leftArm1 ?leftgripper)
        (Instance Holding ?leftholding)
        (HasGripper ?leftholding ?leftgripper)
        (HasPassiveObject ?leftholding ?obj1)
        (Instance Arm rightArm1)
        (HasGripper rightArm1 ?rightgripper)
        (Instance Holding ?rightholding)
        (HasGripper ?rightholding ?rightgripper)
        (HasPassiveObject ?rightholding ?obj2)
        ; affordanceExceptions
        (Instance ?obj1type ?obj1)
        (not (hasAffordanceException ?obj1type put_both_objects))
        (Instance ?obj2type ?obj2)
        (not (hasAffordanceException ?obj2type put_both_objects))
        )
       ((!place_object ?obj1 leftArm1 ?toPlacingArea)
        (:immediate !place_object ?obj2 rightArm1 ?toPlacingArea)
        )
       )
     )
 )
    
